<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<Import Sdk="Microsoft.NET.Sdk" Project="Sdk.targets" />

	<!-- Default item includes (globs and implicit references) -->
	<Import Project="Xamarin.Shared.Sdk.DefaultItems.targets" />
	<Import Project="Xamarin.Shared.Sdk.TargetFrameworkInference.targets" />

	<!-- Automatically supply project capabilities for IDE use -->
	<ItemGroup>
		<ProjectCapability Include="Apple" />
		<ProjectCapability Include="Mobile" />
	</ItemGroup>

	<PropertyGroup>
		<!-- Disable symbol stripping for now, since we're not generating the list of symbols to keep yet -->
		<MtouchNoSymbolStrip>true</MtouchNoSymbolStrip>
	</PropertyGroup>

	<!-- Big hack: disable app host verifications -->
	<Target Name="_CheckForUnsupportedAppHostUsage" />

	<!-- Compute a few values -->
	<PropertyGroup>
		<_Is32BitBuild Condition=" '(MtouchArch)' == 'x86' Or '$(MtouchArch)' == 'ARMv7' Or '$(MtouchArch)' == 'ARMv7s' Or '$(MtouchArch)' == 'ARMv7k' Or '$(MtouchArch)' == 'ARM64_32'">true</_Is32BitBuild>
		<_Is64BitBuild Condition=" '(_Is32BitBuild)' != 'true' ">true</_Is64BitBuild>
	</PropertyGroup>

	<!-- Override overridable targets -->
	<PropertyGroup>
		<BeforeComputeFilesToPublishTargets>_EarlyAppBundleTasks</BeforeComputeFilesToPublishTargets>
		<AfterComputeFilesToPublishTargets>_LateAppBundleTasks</AfterComputeFilesToPublishTargets>
		<BeforeILLinkTargets>_PreProcessAssemblies</BeforeILLinkTargets>
		<AfterILLinkTargets>_PostProcessAssemblies</AfterILLinkTargets>
		<BeforeMonoAOTCompilationTargets></BeforeMonoAOTCompilationTargets>
		<AfterMonoAOTCompilationTargets>_PostProcessAOTCompilation</AfterMonoAOTCompilationTargets>
		<BeforeGenerateSingleFileBundleTargets>_PreProcessNativeLinker</BeforeGenerateSingleFileBundleTargets>
		<AfterGenerateSingleFileBundleTargets>_PostProcessNativeLinker</AfterGenerateSingleFileBundleTargets>
		<!-- Codesign fails for unknown reasons for simulator builds -->
		<AfterPublishTargets Condition=" '$(_SdkIsSimulator)' == 'true' ">Codesign;CreateIpa;Archive</AfterPublishTargets>
	</PropertyGroup>

	<!-- Another big hack: inject our targets -->
	<Target Name="ComputeAndCopyFilesToPublishDirectory"
          DependsOnTargets="
          $(BeforeComputeFilesToPublishTargets);
          ComputeFilesToPublish;
          $(AfterComputeFilesToPublishTargets);
          CopyFilesToPublishDirectory">
	</Target>
	<Target Name="ComputeFilesToPublish"
          DependsOnTargets="
          	ComputeResolvedFilesToPublishList;
          	$(BeforeILLinkTargets);
            ILLink;
            $(AfterILLinkTargets);
            CreateReadyToRunImages;
            $(BeforeMonoAOTCompilationTargets);
            $(AfterMonoAOTCompilationTargets);
            GeneratePublishDependencyFile;
            $(BeforeGenerateSingleFileBundleTargets);
            GenerateSingleFileBundle;
            $(AfterGenerateSingleFileBundleTargets);">
  	</Target>
  	<PropertyGroup>
    <_CorePublishTargets>
    	$(_CorePublishTargets);
    	$(AfterPublishTargets);
    </_CorePublishTargets>

  	</PropertyGroup>
	<!-- Actual implementations for what we need to do -->

	<!-- Linker targets -->
	<Target Name="_PreProcessAssemblies" DependsOnTargets="_ComputeLinkerArguments;_ExtractNativeLibrariesFromBindingAssemblies;" />
	<PropertyGroup>
		<_AdditionalTaskAssemblyDirectory>$(XamarinSdkRootDirectory)tools/dotnet-linker/</_AdditionalTaskAssemblyDirectory>
		<_AdditionalTaskAssembly>$(_AdditionalTaskAssemblyDirectory)dotnet-linker.dll</_AdditionalTaskAssembly>
	</PropertyGroup>
	<ItemGroup>
		<_LinkerSubstitutions Include="$(_AdditionalTaskAssemblyDirectory)/substitute-32bits.xml" Condition=" '$(_Is32BitBuild)' == 'true' " />
		<_LinkerSubstitutions Include="$(_AdditionalTaskAssemblyDirectory)/substitute-64bits.xml" Condition=" '$(_Is64BitBuild)' == 'true' " />
	</ItemGroup>
	<Target Name="_ComputeLinkerSubstitutions">
		<PropertyGroup>
			<_LinkerSubstitutionsCommand>@(_LinkerSubstitutions -> '--substitutions %(FullPath)', '%0a')</_LinkerSubstitutionsCommand>
		</PropertyGroup>
	</Target>
	<Target Name="_ComputeLinkerArguments" DependsOnTargets="_ComputeLinkerSubstitutions;">
		<PropertyGroup>
			<_ExtraTrimmerArgs>--verbose --skip-unresolved false $(_LinkerSubstitutionsCommand) -p link MySingleView --custom-step MonoTouch.Tuner.ProcessExportedFields,$(_AdditionalTaskAssembly)</_ExtraTrimmerArgs>
		</PropertyGroup>
	</Target>
	<Target Name="_ExtractNativeLibrariesFromBindingAssemblies">
		<Warning Text="_ExtractNativeLibrariesFromBindingAssemblies: Not implemented " />
	</Target>

	<PropertyGroup Condition=" '$(_PlatformName)' != 'macOS' ">
		<_EarlyAppBundleTasksDependsOn>
			$(_PlatforName);
			_CollectBundleResources;
			_OptimizePngImages;
			_OptimizePropertyLists;
			_OptimizeLocalizationFiles;
			_PackLibraryResources;
			_UnpackLibraryResources;
			_GenerateBundleName;
			_DetectAppManifest;
			_DetectSigningIdentity;
			_CopyResourcesToBundle;
			_CreateAssetPackManifest;
			_SmeltMetal;
			_ForgeMetal;
			_TemperMetal;
			_CompileCoreMLModels;
			_PrepareResourceRules;
			_CompileEntitlements;
			_CompileAppManifest;
			_GetNativeExecutableName;
			_ParseExtraMtouchArgs;
		</_EarlyAppBundleTasksDependsOn>
		<_LateAppBundleTasksDependsOn>
			_CompileITunesMetadata;
			_CollectITunesArtwork;
			_CopyITunesArtwork;
			_CreateDebugSettings;
			_CreateDebugConfiguration;
			_CreatePkgInfo;
			_CopyAppExtensionsToBundle;
			_CopyWatchOS1AppsToBundle;
			_CopyWatchOS2AppsToBundle;
			_ReadAppExtensionDebugSymbolProperties;
			_GenerateAppExtensionDebugSymbols;
			_PrepareDebugSymbolGeneration;
			_GenerateDebugSymbols;
			_ValidateAppBundle;
		</_LateAppBundleTasksDependsOn>
	</PropertyGroup>

	<PropertyGroup Condition=" '$(_PlatformName)' == 'macOS' ">
		<_EarlyAppBundleTasksDependsOn>
			_CollectBundleResources;
			_PackLibraryResources;
			_UnpackLibraryResources;
			_GenerateBundleName;
			_DetectSigningIdentity;
			_CopyContentToBundle;
			_SmeltMetal;
			_ForgeMetal;
			_TemperMetal;
			_CompileEntitlements;
			_CompileAppManifest;
		</_EarlyAppBundleTasksDependsOn>
		<_LateAppBundleTasksDependsOn>
			_CreatePkgInfo;
			_CopyAppExtensionsToBundle;
		</_LateAppBundleTasksDependsOn>
	</PropertyGroup>

	<!-- App bundle creation tasks -->
	<Target Name="_EarlyAppBundleTasks" DependsOnTargets="$(_EarlyAppBundleTasksDependsOn)" />
	<Target Name="_LateAppBundleTasks" DependsOnTargets="$(_LateAppBundleTasksDependsOn)" />

	<Target Name="_PostProcessAssemblies" DependsOnTargets="_GenerateRegistrarCode;_GeneratePInvokeWrapperCode;_CompilePInvokeWrappers" />
	<Target Name="_PreAOTCompile" DependsOnTargets="_SetVariables">
		<Copy SourceFiles="@(_AssembliesToAOT)" DestinationFolder="$(_AOTInputDirectory)" />
	</Target>
	<Target Name="_AOTCompile"
			Condition="'$(_SdkIsSimulator)' != 'true'"
			DependsOnTargets="_SetVariables;_PreAOTCompile;"
			Inputs="@(_AssembliesToAOT)"
			Outputs="@(_AssembliesToAOT->'$(_AOTOutputDirectory)%(Filename)%(Extension).s')">
		<Exec Command="$(_AOTCompiler) --debug -O=gsharedvt -O=-float32  --aot=mtriple=arm64-ios,data-outfile=$(_AOTOutputDirectory)%(_AssembliesToAOT.Filename).aotdata.arm64,static,asmonly,direct-icalls,full,soft-debug,dwarfdebug,no-direct-icalls,outfile=$(_AOTOutputDirectory)%(_AssembliesToAOT.Filename)%(_AssembliesToAOT.Extension).s $(_AOTInputDirectory)%(_AssembliesToAOT.Filename)%(_AssembliesToAOT.Extension)" />
		<Warning Text="_AOTCompile: @(_AssembliesToAOT) " />
	</Target>
	<Target Name="_PostProcessAOTCompilation" DependsOnTargets="_BuildMSymDirectories;_StripManagedAssemblies;_AOTCompile;">
	</Target>
	<Target Name="_PreProcessNativeLinker" DependsOnTargets="_SelectExecutableOutputMode;_CompileLauncher;_PostProcessAOTCompilation" />
	<Target Name="_PostProcessNativeLinker" DependsOnTargets="_ComputeOutputLocation;_CreateUserFrameworks;_BuildDSymDirectories;_StripNativeCode;"/>

	<Target Name="_GenerateRegistrarCode">
		<Warning Text="_GenerateRegistrarCode: Not implemented " />
	</Target>

	<Target Name="_GeneratePInvokeWrapperCode">
		<Warning Text="_GeneratePInvokeWrapperCode: Not implemented " />
	</Target>

	<Target Name="_CompilePInvokeWrappers">
		<Warning Text="_CompilePInvokeWrappers: Not implemented " />
	</Target>

	<Target Name="_BuildMSymDirectories">
		<Warning Text="_BuildMSymDirectories: Not implemented " />
	</Target>

	<Target Name="_StripManagedAssemblies">
		<Warning Text="_StripManagedAssemblies: Not implemented " />
	</Target>

	<Target Name="_SetVariables">
		<Warning Text="_SetVariables: implementing... " />
		<PropertyGroup>
			<_LibXamarinName Condition="'$(MtouchDebug)' == 'true'">libxamarin-debug.a</_LibXamarinName>
			<_LibXamarinName Condition="'$(MtouchDebug)' != 'true'">libxamarin.a</_LibXamarinName>
			<_LibXamarin Condition="'%(DestinationSubPath)' == '$(_LibXamarinName)'">@(RuntimePackAsset)</_LibXamarin>
			<_LibMonoName>libmono.a</_LibMonoName>
			<_LibMono Condition="'%(DestinationSubPath)' == '$(_LibMonoName)'">@(RuntimePackAsset)</_LibMono>
			<_LibRegistrarName>Xamarin.iOS.registrar.a</_LibRegistrarName>
			<_LibRegistrar Condition="'%(DestinationSubPath)' == '$(_LibRegistrarName)'">@(RuntimePackAsset)</_LibRegistrar>
			<_LibAppName>libapp.a</_LibAppName>
			<_LibApp Condition="'%(DestinationSubPath)' == '$(_LibAppName)'">@(RuntimePackAsset)</_LibApp>

			<_MonoLibDir Condition="'%(DestinationSubPath)' == '$(_LibMonoName)'">@(RuntimePackAsset -> '%(RootDir)%(Directory)')</_MonoLibDir>
			<_RuntimeToolsDir Condition="'%(DestinationSubPath)' == '$(_LibXamarinName)'">@(RuntimePackAsset -> '%(RootDir)%(Directory)')</_RuntimeToolsDir>
			<_RuntimeIncludeDir>$(_RuntimeToolsDir)/include/</_RuntimeIncludeDir>

			<_AOTCompiler>$(_MonoLibDir)/cross/mono-aot-cross</_AOTCompiler>

			<_IntermediateNativeLibraryDir>$(IntermediateOutputPath)nativelibraries/</_IntermediateNativeLibraryDir>
			<_AOTInputDirectory>$(_IntermediateNativeLibraryDir)aot-input/</_AOTInputDirectory>
			<_AOTOutputDirectory>$(_IntermediateNativeLibraryDir)</_AOTOutputDirectory>
		</PropertyGroup>
		<ItemGroup>
			<_AssembliesToAOT Include="@(ResolvedFileToPublish)" Condition="'%(Extension)' == '.dll' Or '%(Extension)' == '.exe' ">
				<_AOTOutputDirectory>$(_IntermediateNativeLibraryDir)</_AOTOutputDirectory>
			</_AssembliesToAOT>

			<_UnreferencedSymbol Condition=" '$(_SdkIsSimulator)' == 'true'" Include="_xamarin_dyn_objc_msgSend" />
			<_UnreferencedSymbol Condition=" '$(_SdkIsSimulator)' == 'true'" Include="_xamarin_dyn_objc_msgSendSuper" />
			<_UnreferencedSymbol Condition=" '$(_SdkIsSimulator)' == 'true'" Include="_xamarin_dyn_objc_msgSend_stret" />
			<_UnreferencedSymbol Condition=" '$(_SdkIsSimulator)' == 'true'" Include="_xamarin_dyn_objc_msgSendSuper_stret" />
			<_UnreferencedSymbol Include="_xamarin_init_nsthread" />
			<_UnreferencedSymbol Include="_xamarin_get_block_descriptor" />
			<_UnreferencedSymbol Include="_xamarin_get_locale_country_code" />
			<_UnreferencedSymbol Include="_xamarin_log" />
			<_UnreferencedSymbol Include="_xamarin_localized_string_format" />
			<_UnreferencedSymbol Include="_xamarin_localized_string_format_1" />
			<_UnreferencedSymbol Include="_xamarin_localized_string_format_2" />
			<_UnreferencedSymbol Include="_xamarin_localized_string_format_3" />
			<_UnreferencedSymbol Include="_xamarin_localized_string_format_4" />
			<_UnreferencedSymbol Include="_xamarin_localized_string_format_5" />
			<_UnreferencedSymbol Include="_xamarin_localized_string_format_6" />
			<_UnreferencedSymbol Include="_xamarin_localized_string_format_7" />
			<_UnreferencedSymbol Include="_xamarin_localized_string_format_8" />
			<_UnreferencedSymbol Include="_xamarin_localized_string_format_9" />
			<_UnreferencedSymbol Include="_xamarin_start_wwan" />
			<_UnreferencedSymbol Include="_xamarin_timezone_get_data" />
			<_UnreferencedSymbol Include="_xamarin_timezone_get_names" />
			<_UnreferencedSymbol Include="_xamarin_timezone_get_local_name" />
			<_UnreferencedSymbol Include="_xamarin_IntPtr_objc_msgSend_IntPtr" />
			<_UnreferencedSymbol Include="_xamarin_IntPtr_objc_msgSendSuper_IntPtr" />
			<_UnreferencedSymbol Include="_xamarin_release_managed_ref" />
			<_UnreferencedSymbol Include="_xamarin_create_managed_ref" />
			<_UnreferencedSymbol Include="_xamarin_CGPoint__VNNormalizedFaceBoundingBoxPointForLandmarkPoint_Vector2_CGRect_nuint_nuint_string" />
			<_UnreferencedSymbol Include="_xamarin_CGPoint__VNImagePointForFaceLandmarkPoint_Vector2_CGRect_nuint_nuint_string" />
<!-- 			<_UnreferencedSymbol Include="_CloseZStream" />
			<_UnreferencedSymbol Include="_CreateZStream" />
			<_UnreferencedSymbol Include="_Flush" />
			<_UnreferencedSymbol Include="_ReadZStream" />
			<_UnreferencedSymbol Include="_WriteZStream" /> -->

			<_Framework Include="Accelerate" />
			<_Framework Include="AddressBook" />
			<_Framework Include="AddressBookUI" Condition="'$(_PlatformName)' != 'macOS' " />
			<_Framework Include="AudioToolbox" />
			<_Framework Include="AVFoundation" />
			<_Framework Include="CFNetwork" />
			<_Framework Include="CoreAudio" />
			<_Framework Include="CoreData" />
			<_Framework Include="CoreFoundation" />
			<_Framework Include="CoreGraphics" />
			<_Framework Include="CoreLocation" />
			<_Framework Include="CoreText" />
			<_Framework Include="ExternalAccessory" />
			<_Framework Include="Foundation" />
			<_Framework Include="GameKit" />
			<_Framework Include="MapKit" />
			<_Framework Include="MediaPlayer" />
			<_Framework Include="MessageUI" Condition="'$(_PlatformName)' != 'macOS' " />
			<_Framework Include="MobileCoreServices" Condition="'$(_PlatformName)' != 'macOS' " />
			<_Framework Include="OpenAL" />
			<_Framework Include="OpenGLES" Condition="'$(_PlatformName)' != 'macOS' " />
			<_Framework Include="StoreKit" />
			<_Framework Include="SystemConfiguration" />
			<_Framework Include="UIKit" Condition="'$(_PlatformName)' != 'macOS' " />
			<_Framework Include="AppKit" Condition="'$(_PlatformName)' == 'macOS' " />


			<_WeakFramework Include="Accounts" />
			<_WeakFramework Include="AdSupport" />
			<_WeakFramework Include="ARKit" Condition="'$(_PlatformName)' != 'macOS' " />
			<_WeakFramework Include="AssetsLibrary" Condition="'$(_PlatformName)' != 'macOS' " />
			<_WeakFramework Include="AuthenticationServices" />
			<_WeakFramework Include="AutomaticAssessmentConfiguration" />
			<_WeakFramework Include="AVKit" />
			<_WeakFramework Include="BackgroundTasks" />
			<_WeakFramework Include="BusinessChat" />
			<_WeakFramework Include="CallKit" />
			<_WeakFramework Include="CarPlay" Condition="'$(_PlatformName)' != 'macOS' " />
			<_WeakFramework Include="ClassKit" Condition="'$(_PlatformName)' != 'macOS' " />
			<_WeakFramework Include="CloudKit" />
			<_WeakFramework Include="Contacts" />
			<_WeakFramework Include="ContactsUI" />
			<_WeakFramework Include="CoreAudioKit" />
			<_WeakFramework Include="CoreBluetooth" />
			<_WeakFramework Include="CoreHaptics" />
			<_WeakFramework Include="CoreImage" />
			<_WeakFramework Include="CoreMedia" />
			<_WeakFramework Include="CoreMidi" />
			<_WeakFramework Include="CoreMotion" />
			<_WeakFramework Include="CoreSpotlight" />
			<_WeakFramework Include="CoreTelephony" />
			<_WeakFramework Include="CoreVideo" />
			<_WeakFramework Include="EventKit" />
			<_WeakFramework Include="EventKitUI" Condition="'$(_PlatformName)' != 'macOS' " />
			<_WeakFramework Include="FileProvider" />
			<_WeakFramework Include="FileProviderUI" />
			<_WeakFramework Include="GameplayKit" />
			<_WeakFramework Include="GLKit" />
			<_WeakFramework Include="HealthKit" Condition="'$(_PlatformName)' != 'macOS' " />
			<_WeakFramework Include="HealthKitUI" Condition="'$(_PlatformName)' != 'macOS' " />
			<_WeakFramework Include="HomeKit" Condition="'$(_PlatformName)' != 'macOS' " />
			<_WeakFramework Include="iAd" Condition="'$(_PlatformName)' != 'macOS' " />
			<_WeakFramework Include="IdentityLookup" />
			<_WeakFramework Include="IdentityLookupUI" Condition="'$(_PlatformName)' != 'macOS' " />
			<_WeakFramework Include="ImageIO" />
			<_WeakFramework Include="Intents" />
			<_WeakFramework Include="IntentsUI" Condition="'$(_PlatformName)' != 'macOS' " />
			<_WeakFramework Include="JavaScriptCore" />
			<_WeakFramework Include="LinkPresentation" />
			<_WeakFramework Include="LocalAuthentication" />
			<_WeakFramework Include="Messages" Condition="'$(_PlatformName)' != 'macOS' " />
			<_WeakFramework Include="Metal" />
			<_WeakFramework Include="Metal" />
			<_WeakFramework Include="MetalKit" />
			<_WeakFramework Include="MetalPerformanceShaders" />
			<_WeakFramework Include="MetricKit" />
			<_WeakFramework Include="ModelIO" />
			<_WeakFramework Include="MultipeerConnectivity" />
			<_WeakFramework Include="NaturalLanguage" />
			<_WeakFramework Include="Network" />
			<_WeakFramework Include="NetworkExtension" />
			<_WeakFramework Include="NewsstandKit" Condition="'$(_PlatformName)' != 'macOS' " />
			<_WeakFramework Include="NotificationCenter" />
			<_WeakFramework Include="PassKit" Condition="'$(_PlatformName)' != 'macOS' " />
			<_WeakFramework Include="PencilKit" />
			<_WeakFramework Include="Photos" />
			<_WeakFramework Include="PhotosUI" />
			<_WeakFramework Include="PushKit" />
			<_WeakFramework Include="QuickLook" />
			<_WeakFramework Include="QuickLookThumbnailing" />
			<_WeakFramework Include="ReplayKit" Condition="'$(_PlatformName)' != 'macOS' " />
			<_WeakFramework Include="SafariServices" />
			<_WeakFramework Include="SceneKit" />
			<_WeakFramework Include="Security" />
			<_WeakFramework Include="Social" />
			<_WeakFramework Include="SoundAnalysis" />
			<_WeakFramework Include="Speech" />
			<_WeakFramework Include="SpriteKit" />
			<_WeakFramework Include="Twitter" Condition="'$(_PlatformName)' != 'macOS' " />
			<_WeakFramework Include="UserNotifications" />
			<_WeakFramework Include="UserNotificationsUI" Condition="'$(_PlatformName)' != 'macOS' " />
			<_WeakFramework Include="VideoSubscriberAccount" />
			<_WeakFramework Include="VisionKit" Condition="'$(_PlatformName)' != 'macOS' " />
			<_WeakFramework Include="WatchConnectivity" Condition="'$(_PlatformName)' != 'macOS' " />
			<_WeakFramework Include="WebKit" />

			<_NativeDynamicLibrary Include="@(ResolvedFileToPublish)" Condition="'%(Extension)' == '.dylib' And '%(RootDir)%(Directory)' == '$(_MonoLibDir)'" />
			<_NativeDynamicLibrary Update="@(_NativeDynamicLibrary)">
				<LibraryName>$([System.String]::new('%(Filename)').Substring(3))</LibraryName>
			</_NativeDynamicLibrary>
			<_NativeDynamicLibraryPathAll Include="@(_NativeDynamicLibrary -> '%(RootDir)%(Directory)')" />
			<_NativeDynamicLibraryPath Include="@(_NativeDynamicLibraryPathAll->Distinct ())" />
		</ItemGroup>
	</Target>

	<Target Name="_CompileLauncher" DependsOnTargets="_SetVariables;_UpdateDynamicLibraryId">
		<Warning Text="_CompileLauncher: implementing... " />
		<PropertyGroup>
			<_LibXamarinName Condition="'$(MtouchDebug)' == 'true'">libxamarin-debug.a</_LibXamarinName>
			<_LibXamarinName Condition="'$(MtouchDebug)' != 'true'">libxamarin.a</_LibXamarinName>
			<_LibXamarin Condition="'%(DestinationSubPath)' == '$(_LibXamarinName)'">@(RuntimePackAsset)</_LibXamarin>
			<_LibMonoName>libmono.a</_LibMonoName>
			<_LibMono Condition="'%(DestinationSubPath)' == '$(_LibMonoName)'">@(RuntimePackAsset)</_LibMono>
			<_LibRegistrarName>Xamarin.iOS.registrar.a</_LibRegistrarName>
			<_LibRegistrar Condition="'%(DestinationSubPath)' == '$(_LibRegistrarName)'">@(RuntimePackAsset)</_LibRegistrar>
			<_LibAppName>libapp.a</_LibAppName>
			<_LibApp Condition="'%(DestinationSubPath)' == '$(_LibAppName)'">@(RuntimePackAsset)</_LibApp>

			<_RuntimeToolsDir Condition="'%(DestinationSubPath)' == '$(_LibXamarinName)'">@(RuntimePackAsset -> '%(RootDir)%(Directory)')</_RuntimeToolsDir>
			<_RuntimeIncludeDir>$(_RuntimeToolsDir)/include/</_RuntimeIncludeDir>

			<_Clang>$(_SdkDevPath)/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang</_Clang>
			<_SimLauncher>$(_RuntimeToolsDir)simlauncher.mm</_SimLauncher>
			<_UnreferencedSymbols>@(_UnreferencedSymbol -> '-u %(Identity)', ' ')</_UnreferencedSymbols>
			<_Frameworks>@(_Framework -> '-framework %(Identity)', ' ')</_Frameworks>
			<_WeakFrameworks>@(_WeakFramework -> '-weak_framework %(Identity)', ' ')</_WeakFrameworks>
			<_Defines>-DDEBUG -DSIMLAUNCHER -DNET -DMONOTOUCH -DXAMARIN_EXECUTABLE_NAME=$(AssemblyName).dll</_Defines>
			<_Warnings>-Wl,-w -Wall -Werror -Wconversion -Wdeprecated -Wuninitialized</_Warnings>
			<_Includes>-I$(_RuntimeIncludeDir)</_Includes>
			<_LinkerFlags>-lz -liconv @(_NativeDynamicLibraryPath -> '-L%(FullPath)', ' ') @(_NativeDynamicLibrary -> '-l%(LibraryName)', ' ')</_LinkerFlags>
			<_ISysRoot>-isysroot $(_SdkRoot)</_ISysRoot>
			<_Arch Condition=" '$(_Arch)' == '' And '$(_PlatformName)' == 'macOS'">-arch x86_64</_Arch>
			<_Arch Condition=" '$(_Arch)' == '' And '$(_SdkIsSimulator)' == 'true'">-arch x86_64</_Arch>
			<_Arch Condition=" '$(_Arch)' == '' And '$(_SdkIsSimulator)' != 'true'">-arch arm64</_Arch>
			<_MinOSVersion Condition=" '$(_MinOSVersion)' == '' And '$(_PlatformName)' == 'macOS'">-mmacosx-version-min=10.9</_MinOSVersion>
			<_MinOSVersion Condition=" '$(_MinOSVersion)' == '' And '$(_SdkIsSimulator)' == 'true'">-mios-simulator-version-min=7.0</_MinOSVersion>
			<_MinOSVersion Condition=" '$(_MinOSVersion)' == '' And '$(_SdkIsSimulator)' != 'true'">-miphoneos-version-min=7.0</_MinOSVersion>
			<_OtherFlags>-gdwarf-2 -fobjc-abi-version=2 -fobjc-legacy-dispatch -fms-extensions -fstack-protector-strong -ObjC++ -std=c++14 -fno-exceptions -stdlib=libc++ $(_MinOSVersion) -g -Wl,-rpath -Wl,@executable_path/</_OtherFlags>
			<_LauncherCmd>$(_Clang) $(_UnreferencedSymbols) $(_Frameworks) $(_WeakFrameworks) $(_Defines) $(_Warnings) $(_Includes) $(_LinkerFlags) $(_ISysRoot) $(_Arch) $(_OtherFlags) $(_LibMono) $(_LibXamarin) $(_LibRegistrar) $(_LibApp) $(_SimLauncher)	-o $(_AppBundlePath)$(_AppBundleName)</_LauncherCmd>
		</PropertyGroup>
		<Warning Text="RuntimePackAsset: @(RuntimePackAsset)" />
		<Warning Text="_LauncherCmd: $(_LauncherCmd)" />
		<Exec Command="$(_LauncherCmd)" />
	</Target>

	<Target Name="_ComputeOutputLocation">
		<Warning Text="_ComputeOutputLocation: implementing... " />
		<!-- Put .dll, .pdb, .exe and .dylib in the .app -->
		<ItemGroup>
			<ResolvedFileToPublish
				Update="@(ResolvedFileToPublish)"
				RelativePath="$([MSBuild]::MakeRelative($(MSBuildProjectDirectory)$(PublishDir),$(MSBuildProjectDirectory)$(_AppBundlePath)))\%(Filename)%(Extension)"
				Condition=" '%(Extension)' == '.dll' Or '%(Extension)' == '.pdb' Or '$(Extension)' == '.exe' Or '%(Extension)' == '.dylib'" />
			<Whatever Include="@(ResolvedFileToPublish)" />
			<Whatever2 Include="@(ResolvedFileToPublish)" Condition="'%(Extension)' == '.dylib'" />
		</ItemGroup>
		<Warning Text="_ComputeOutputLocation: @(ResolvedFileToPublish) " />
	</Target>

	<!-- The .dylibs shipped with mono comes with the original identity:

	$ otool -l ~/.nuget/packages/microsoft.netcore.app.runtime.ios-x64/5.0.0-*/runtimes/ios-x64/native/libSystem.IO.Compression.Native.dylib | grep LC_ID_DYLIB -A 2
          cmd LC_ID_DYLIB
      cmdsize 184
         name /Users/runner/runners/2.165.2/work/1/s/artifacts/obj/native/netcoreapp5.0-iOS-Release-x64/System.IO.Compression.Native/libSystem.IO.Compression.Native.dylib (offset 24)

	This doesn't work after linking with these libraries, so this must be fixed to be @executable_path/. Eventually mono should ship dylibs we don't have to fix.
	-->
	<Target Name="_UpdateDynamicLibraryId" DependsOnTargets="_SetVariables" Inputs="@(_NativeDynamicLibrary)" Outputs="@(_NativeDynamicLibrary -> '$(_IntermediateNativeLibraryDir)%(Filename)%(Extension)')">
		<!-- install_name_tool modifies the file in-place, so copy it first to a temporary directory before we fix it -->
		<Copy SourceFiles="%(_NativeDynamicLibrary.FullPath)" DestinationFolder="$(_IntermediateNativeLibraryDir)" />
		<Exec Command="install_name_tool -id @executable_path/%(_NativeDynamicLibrary.Filename)%(_NativeDynamicLibrary.Extension) $(_IntermediateNativeLibraryDir)%(_NativeDynamicLibrary.Filename)%(_NativeDynamicLibrary.Extension)" />
		<ItemGroup>
			<_NativeDynamicLibraryFixed Include="@(_NativeDynamicLibrary -> '$(_IntermediateNativeLibraryDir)%(Filename)%(Extension)')" />
			<_NativeDynamicLibraryPath Remove="@(_NativeDynamicLibrary -> '%(RootDir)%(Directory)')" />
			<_NativeDynamicLibraryPath Include="@(_NativeDynamicLibraryFixed -> '%(RootDir)%(Directory)')" />
			<ResolvedFileToPublish Remove="@(_NativeDynamicLibrary)" />
			<ResolvedFileToPublish Include="@(_NativeDynamicLibraryFixed)" />
		</ItemGroup>
	</Target>

	<Target Name="_CreateUserFrameworks">
		<Warning Text="_CreateUserFrameworks: Not implemented " />
	</Target>

	<Target Name="_BuildDSymDirectories">
		<Warning Text="_BuildDSymDirectories: Not implemented " />
	</Target>

	<Target Name="_StripNativeCode">
		<Warning Text="_StripNativeCode: Not implemented " />
	</Target>

	<Target Name="_SelectExecutableOutputMode">
		<Warning Text="_SelectExecutableOutputMode: Not implemented " />
	</Target>

	<!-- Project types and how do we distinguish between them

									  OutputType   Custom variable
		==================================================================
		iOS Executable Project        Exe
		iOS App Extension Project     Library      IsAppExtension
		iOS Binding Project           Library      IsBindingProject
		iOS Class Library Project     Library

		tvOS Executable Project       Exe
		tvOS App Extension Project    Library      IsAppExtension
		tvOS Binding Project          Library      IsBindingProject
		tvOS Class Library Project    Library

		watchOS App Project           Library      IsWatchOSApp
		watchOS App Extension Project Library      IsAppExtension
		watchOS Binding Project       Library      IsBindingProject
		watchOS Class Library Project Library

		macOS Executable Project        Exe
		macOS App Extension Project     Library      IsAppExtension
		macOS Binding Project           Library      IsBindingProject
		macOS Class Library Project     Library

	-->

	<PropertyGroup>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'iOS' And '$(OutputType)' == 'Exe'">iOSExecutableProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'iOS' And '$(OutputType)' == 'Library' And '$(IsAppExtension)' != ''">iOSAppExtensionProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'iOS' And '$(OutputType)' == 'Library' And '$(IsBindingProject)' != ''">iOSBindingProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'iOS' And '$(OutputType)' == 'Library'">iOSClassLibrary</_ProjectType>

		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'tvOS' And '$(OutputType)' == 'Exe'">tvOSExecutableProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'tvOS' And '$(OutputType)' == 'Library' And '$(IsAppExtension)' != ''">tvOSAppExtensionProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'tvOS' And '$(OutputType)' == 'Library' And '$(IsBindingProject)' != ''">tvOSBindingProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'tvOS' And '$(OutputType)' == 'Library'">tvOSClassLibrary</_ProjectType>

		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'watchOS' And '$(IsWatchOSApp)' != ''">watchOSAppProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'watchOS' And '$(IsAppExtension)' != ''">watchOSAppExtensionProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'watchOS' And '$(IsBindingProject)' != ''">watchOSBindingProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'watchOS'">watchOSClassLibrary</_ProjectType>

		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'macOS' And '$(OutputType)' == 'Exe'">macOSExecutableProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'macOS' And '$(OutputType)' == 'Library' And '$(IsAppExtension)' != ''">macOSAppExtensionProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'macOS' And '$(OutputType)' == 'Library' And '$(IsBindingProject)' != ''">macOSBindingProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'macOS' And '$(OutputType)' == 'Library'">macOSClassLibrary</_ProjectType>

		<_ProjectLanguage>$(Language)</_ProjectLanguage>
		<_ProjectLanguage Condition="'$(_ProjectLanguage)' == '' Or '$(_ProjectLanguage)' == 'C#' ">CSharp</_ProjectLanguage>
		<_ProjectLanguage Condition="'$(_ProjectLanguage)' == 'F#' ">FSharp</_ProjectLanguage>
	</PropertyGroup>

	<!-- Import existing targets -->

	<PropertyGroup>
		<_TargetsDiriOS>$(XamarinSdkRootDirectory)\tools\msbuild\iOS</_TargetsDiriOS>
		<_TargetsDirtvOS>$(XamarinSdkRootDirectory)\tools\msbuild\TVOS</_TargetsDirtvOS>
		<_TargetsDirwatchOS>$(XamarinSdkRootDirectory)\tools\msbuild\WatchOS</_TargetsDirwatchOS>
		<_TargetsDirmacOS>$(XamarinSdkRootDirectory)\tools\msbuild</_TargetsDirmacOS>
	</PropertyGroup>

	<Import Project="$(_TargetsDiriOS)\Xamarin.iOS.$(_ProjectLanguage).targets"              Condition="'$(_ProjectType)' == 'iOSExecutableProject' Or '$(_ProjectType)' == 'iOSClassLibrary' " />
	<Import Project="$(_TargetsDiriOS)\Xamarin.iOS.AppExtension.$(_ProjectLanguage).targets" Condition="'$(_ProjectType)' == 'iOSAppExtensionProject' " />
	<Import Project="$(_TargetsDiriOS)\Xamarin.iOS.ObjCBinding.$(_ProjectLanguage).targets"  Condition="'$(_ProjectType)' == 'iOSBindingProject' " />

	<Import Project="$(_TargetsDirtvOS)\Xamarin.TVOS.$(_ProjectLanguage).targets"              Condition="'$(_ProjectType)' == 'tvOSExecutableProject' Or '$(_ProjectType)' == 'tvOSClassLibrary' " />
	<Import Project="$(_TargetsDirtvOS)\Xamarin.TVOS.AppExtension.$(_ProjectLanguage).targets" Condition="'$(_ProjectType)' == 'tvOSAppExtensionProject' " />
	<Import Project="$(_TargetsDirtvOS)\Xamarin.TVOS.ObjCBinding.$(_ProjectLanguage).targets"  Condition="'$(_ProjectType)' == 'tvOSBindingProject' " />

	<Import Project="$(_TargetsDirwatchOS)\Xamarin.WatchOS.$(_ProjectLanguage).targets"              Condition="'$(_ProjectType)' == 'watchOSClassLibrary' " />
	<Import Project="$(_TargetsDirwatchOS)\Xamarin.WatchOS.App.$(_ProjectLanguage).targets"          Condition="'$(_ProjectType)' == 'watchOSAppProject' " />
	<Import Project="$(_TargetsDirwatchOS)\Xamarin.WatchOS.AppExtension.$(_ProjectLanguage).targets" Condition="'$(_ProjectType)' == 'watchOSAppExtensionProject' " />
	<Import Project="$(_TargetsDirwatchOS)\Xamarin.WatchOS.ObjCBinding.$(_ProjectLanguage).targets"  Condition="'$(_ProjectType)' == 'watchOSBindingProject' " />

	<Import Project="$(_TargetsDirmacOS)\Xamarin.Mac.$(_ProjectLanguage).targets"              Condition="'$(_ProjectType)' == 'macOSExecutableProject' Or '$(_ProjectType)' == 'macOSClassLibrary' " />
	<Import Project="$(_TargetsDirmacOS)\Xamarin.Mac.AppExtension.$(_ProjectLanguage).targets" Condition="'$(_ProjectType)' == 'macOSAppExtensionProject' " />
	<Import Project="$(_TargetsDirmacOS)\Xamarin.Mac.ObjCBinding.$(_ProjectLanguage).targets"  Condition="'$(_ProjectType)' == 'macOSBindingProject' " />


	<Target Name="_CompileToNative" /> <!-- sledge hammer approach -->
</Project>

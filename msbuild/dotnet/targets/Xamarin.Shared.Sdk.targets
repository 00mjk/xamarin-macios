<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<Import Sdk="Microsoft.NET.Sdk" Project="Sdk.targets" />

	<!-- Default item includes (globs and implicit references) -->
	<Import Project="Xamarin.Shared.Sdk.DefaultItems.targets" />
	<Import Project="Xamarin.Shared.Sdk.TargetFrameworkInference.targets" />

	<!-- Automatically supply project capabilities for IDE use -->
	<ItemGroup>
		<ProjectCapability Include="Apple" />
		<ProjectCapability Include="Mobile" />
	</ItemGroup>

	<!-- Compute a few values -->
	<PropertyGroup>
		<_Is32BitBuild Condition=" '(MtouchArch)' == 'x86' Or '$(MtouchArch)' == 'ARMv7' Or '$(MtouchArch)' == 'ARMv7s' Or '$(MtouchArch)' == 'ARMv7k' Or '$(MtouchArch)' == 'ARM64_32'">true</_Is32BitBuild>
		<_Is64BitBuild Condition=" '(_Is32BitBuild)' != 'true' ">true</_Is64BitBuild>
	</PropertyGroup>

	<!-- Override overridable targets -->
	<PropertyGroup>
		<BeforeComputeFilesToPublishTargets>_EarlyAppBundleTasks</BeforeComputeFilesToPublishTargets>
		<AfterComputeFilesToPublishTargets>_LateAppBundleTasks</AfterComputeFilesToPublishTargets>
		<BeforeILLinkTargets>_PreProcessAssemblies</BeforeILLinkTargets>
		<AfterILLinkTargets>_PostProcessAssemblies</AfterILLinkTargets>
		<BeforeMonoAOTCompilationTargets></BeforeMonoAOTCompilationTargets>
		<AfterMonoAOTCompilationTargets>_PostProcessAOTCompilation</AfterMonoAOTCompilationTargets>
		<BeforeGenerateSingleFileBundleTargets>_PreProcessNativeLinker</BeforeGenerateSingleFileBundleTargets>
		<AfterGenerateSingleFileBundleTargets>_PostProcessNativeLinker</AfterGenerateSingleFileBundleTargets>
		<!-- Codesign fails because there's no native binary yet -->
		<!-- <AfterPublishTargets>Codesign;CreateIpa;Archive</AfterPublishTargets> -->
	</PropertyGroup>

	<!-- Actual implementations for what we need to do -->

	<!-- Linker targets -->
	<Target Name="_PreProcessAssemblies" DependsOnTargets="_ComputeLinkerArguments;_ExtractNativeLibrariesFromBindingAssemblies;" />
	<PropertyGroup>
		<_AdditionalTaskAssemblyDirectory>$(XamarinSdkRootDirectory)/tools/dotnet-linker/</_AdditionalTaskAssemblyDirectory>
		<_AdditionalTaskAssembly>$(_AdditionalTaskAssemblyDirectory)dotnet-linker.dll</_AdditionalTaskAssembly>
	</PropertyGroup>
	<ItemGroup>
		<_LinkerSubstitutions Include="$(_AdditionalTaskAssemblyDirectory)/substitute-32bits.xml" Condition=" '$(_Is32BitBuild)' == 'true' " />
		<_LinkerSubstitutions Include="$(_AdditionalTaskAssemblyDirectory)/substitute-64bits.xml" Condition=" '$(_Is64BitBuild)' == 'true' " />
	</ItemGroup>
	<Target Name="_ComputeLinkerSubstitutions">
		<PropertyGroup>
			<_LinkerSubstitutionsCommand>@(_LinkerSubstitutions -> '--substitutions %(FullPath)', '%0a')</_LinkerSubstitutionsCommand>
		</PropertyGroup>
		<Exec Command="ls -la $(_AdditionalTaskAssemblyDirectory)" />
	</Target>
	<Target Name="_ComputeLinkerArguments" DependsOnTargets="_ComputeLinkerSubstitutions;">
		<PropertyGroup>
			<_ExtraTrimmerArgs>--verbose --skip-unresolved false $(_LinkerSubstitutionsCommand) -p link MySingleView</_ExtraTrimmerArgs>
		</PropertyGroup>
	</Target>
	<Target Name="_ExtractNativeLibrariesFromBindingAssemblies">
		<Warning Text="_ExtractNativeLibrariesFromBindingAssemblies: Not implemented " />
	</Target>

	<!-- App bundle creation tasks -->
	<Target Name="_EarlyAppBundleTasks" DependsOnTargets="
		_CollectBundleResources;
		_OptimizePngImages;
		_OptimizePropertyLists;
		_OptimizeLocalizationFiles;
		_PackLibraryResources;
		_UnpackLibraryResources;
		_GenerateBundleName;
		_DetectAppManifest;
		_DetectSigningIdentity;
		_CopyResourcesToBundle;
		_CreateAssetPackManifest;
		_SmeltMetal;
		_ForgeMetal;
		_TemperMetal;
		_CompileCoreMLModels;
		_PrepareResourceRules;
		_CompileEntitlements;
		_CompileAppManifest;
		_GetNativeExecutableName;
		_ParseExtraMtouchArgs;
		" />

	<Target Name="_LateAppBundleTasks" DependsOnTargets="
		_CompileITunesMetadata;
		_CollectITunesArtwork;
		_CopyITunesArtwork;
		_CreateDebugSettings;
		_CreateDebugConfiguration;
		_CreatePkgInfo;
		_CopyAppExtensionsToBundle;
		_CopyWatchOS1AppsToBundle;
		_CopyWatchOS2AppsToBundle;
		_ReadAppExtensionDebugSymbolProperties;
		_GenerateAppExtensionDebugSymbols;
		_PrepareDebugSymbolGeneration;
		_GenerateDebugSymbols;
		_ValidateAppBundle;
		" />

	<Target Name="_PostProcessAssemblies" DependsOnTargets="_GenerateRegistrarCode;_GeneratePInvokeWrapperCode;_CompilePInvokeWrappers" />
	<Target Name="_PostProcessAOTCompilation" DependsOnTargets="_BuildMSymDirectories;_StripManagedAssemblies;" />
	<Target Name="_PreProcessNativeLinker" DependsOnTargets="_SelectExecutableOutputMode;" />
	<Target Name="_PostProcessNativeLinker" DependsOnTargets="_ComputeOutputLocation;_CreateUserFrameworks;_BuildDSymDirectories;_StripNativeCode;"/>

	<Target Name="_GenerateRegistrarCode">
		<Warning Text="_GenerateRegistrarCode: Not implemented " />
	</Target>

	<Target Name="_GeneratePInvokeWrapperCode">
		<Warning Text="_GeneratePInvokeWrapperCode: Not implemented " />
	</Target>

	<Target Name="_CompilePInvokeWrappers">
		<Warning Text="_CompilePInvokeWrappers: Not implemented " />
	</Target>

	<Target Name="_BuildMSymDirectories">
		<Warning Text="_BuildMSymDirectories: Not implemented " />
	</Target>

	<Target Name="_StripManagedAssemblies">
		<Warning Text="_StripManagedAssemblies: Not implemented " />
	</Target>

	<Target Name="_ComputeOutputLocation">
		<Warning Text="_ComputeOutputLocation: Not implemented " />
	</Target>

	<Target Name="_CreateUserFrameworks">
		<Warning Text="_CreateUserFrameworks: Not implemented " />
	</Target>

	<Target Name="_BuildDSymDirectories">
		<Warning Text="_BuildDSymDirectories: Not implemented " />
	</Target>

	<Target Name="_StripNativeCode">
		<Warning Text="_StripNativeCode: Not implemented " />
	</Target>

	<Target Name="_SelectExecutableOutputMode">
		<Warning Text="_SelectExecutableOutputMode: Not implemented " />
	</Target>

	<!-- Project types and how do we distinguish between them

									  OutputType   Custom variable
		==================================================================
		iOS Executable Project        Exe
		iOS App Extension Project     Library      IsAppExtension
		iOS Binding Project           Library      IsBindingProject
		iOS Class Library Project     Library

		tvOS Executable Project       Exe
		tvOS App Extension Project    Library      IsAppExtension
		tvOS Binding Project          Library      IsBindingProject
		tvOS Class Library Project    Library

		watchOS App Project           Library      IsWatchOSApp
		watchOS App Extension Project Library      IsAppExtension
		watchOS Binding Project       Library      IsBindingProject
		watchOS Class Library Project Library

		macOS Executable Project        Exe
		macOS App Extension Project     Library      IsAppExtension
		macOS Binding Project           Library      IsBindingProject
		macOS Class Library Project     Library

	-->

	<PropertyGroup>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'iOS' And '$(OutputType)' == 'Exe'">iOSExecutableProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'iOS' And '$(OutputType)' == 'Library' And '$(IsAppExtension)' != ''">iOSAppExtensionProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'iOS' And '$(OutputType)' == 'Library' And '$(IsBindingProject)' != ''">iOSBindingProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'iOS' And '$(OutputType)' == 'Library'">iOSClassLibrary</_ProjectType>

		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'tvOS' And '$(OutputType)' == 'Exe'">tvOSExecutableProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'tvOS' And '$(OutputType)' == 'Library' And '$(IsAppExtension)' != ''">tvOSAppExtensionProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'tvOS' And '$(OutputType)' == 'Library' And '$(IsBindingProject)' != ''">tvOSBindingProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'tvOS' And '$(OutputType)' == 'Library'">tvOSClassLibrary</_ProjectType>

		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'watchOS' And '$(IsWatchOSApp)' != ''">watchOSAppProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'watchOS' And '$(IsAppExtension)' != ''">watchOSAppExtensionProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'watchOS' And '$(IsBindingProject)' != ''">watchOSBindingProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'watchOS'">watchOSClassLibrary</_ProjectType>

		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'macOS' And '$(OutputType)' == 'Exe'">macOSExecutableProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'macOS' And '$(OutputType)' == 'Library' And '$(IsAppExtension)' != ''">macOSAppExtensionProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'macOS' And '$(OutputType)' == 'Library' And '$(IsBindingProject)' != ''">macOSBindingProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'macOS' And '$(OutputType)' == 'Library'">macOSClassLibrary</_ProjectType>

		<_ProjectLanguage>$(Language)</_ProjectLanguage>
		<_ProjectLanguage Condition="'$(_ProjectLanguage)' == '' Or '$(_ProjectLanguage)' == 'C#' ">CSharp</_ProjectLanguage>
		<_ProjectLanguage Condition="'$(_ProjectLanguage)' == 'F#' ">FSharp</_ProjectLanguage>
	</PropertyGroup>

	<!-- Import existing targets -->

	<PropertyGroup>
		<_TargetsDiriOS>$(XamarinSdkRootDirectory)\tools\msbuild\iOS</_TargetsDiriOS>
		<_TargetsDirtvOS>$(XamarinSdkRootDirectory)\tools\msbuild\TVOS</_TargetsDirtvOS>
		<_TargetsDirwatchOS>$(XamarinSdkRootDirectory)\tools\msbuild\WatchOS</_TargetsDirwatchOS>
		<_TargetsDirmacOS>$(XamarinSdkRootDirectory)\tools\msbuild</_TargetsDirmacOS>
	</PropertyGroup>

	<Import Project="$(_TargetsDiriOS)\Xamarin.iOS.$(_ProjectLanguage).targets"              Condition="'$(_ProjectType)' == 'iOSExecutableProject' Or '$(_ProjectType)' == 'iOSClassLibrary' " />
	<Import Project="$(_TargetsDiriOS)\Xamarin.iOS.AppExtension.$(_ProjectLanguage).targets" Condition="'$(_ProjectType)' == 'iOSAppExtensionProject' " />
	<Import Project="$(_TargetsDiriOS)\Xamarin.iOS.ObjCBinding.$(_ProjectLanguage).targets"  Condition="'$(_ProjectType)' == 'iOSBindingProject' " />

	<Import Project="$(_TargetsDirtvOS)\Xamarin.TVOS.$(_ProjectLanguage).targets"              Condition="'$(_ProjectType)' == 'tvOSExecutableProject' Or '$(_ProjectType)' == 'tvOSClassLibrary' " />
	<Import Project="$(_TargetsDirtvOS)\Xamarin.TVOS.AppExtension.$(_ProjectLanguage).targets" Condition="'$(_ProjectType)' == 'tvOSAppExtensionProject' " />
	<Import Project="$(_TargetsDirtvOS)\Xamarin.TVOS.ObjCBinding.$(_ProjectLanguage).targets"  Condition="'$(_ProjectType)' == 'tvOSBindingProject' " />

	<Import Project="$(_TargetsDirwatchOS)\Xamarin.WatchOS.$(_ProjectLanguage).targets"              Condition="'$(_ProjectType)' == 'watchOSClassLibrary' " />
	<Import Project="$(_TargetsDirwatchOS)\Xamarin.WatchOS.App.$(_ProjectLanguage).targets"          Condition="'$(_ProjectType)' == 'watchOSAppProject' " />
	<Import Project="$(_TargetsDirwatchOS)\Xamarin.WatchOS.AppExtension.$(_ProjectLanguage).targets" Condition="'$(_ProjectType)' == 'watchOSAppExtensionProject' " />
	<Import Project="$(_TargetsDirwatchOS)\Xamarin.WatchOS.ObjCBinding.$(_ProjectLanguage).targets"  Condition="'$(_ProjectType)' == 'watchOSBindingProject' " />

	<Import Project="$(_TargetsDirmacOS)\Xamarin.Mac.$(_ProjectLanguage).targets"              Condition="'$(_ProjectType)' == 'macOSExecutableProject' Or '$(_ProjectType)' == 'macOSClassLibrary' " />
	<Import Project="$(_TargetsDirmacOS)\Xamarin.Mac.AppExtension.$(_ProjectLanguage).targets" Condition="'$(_ProjectType)' == 'macOSAppExtensionProject' " />
	<Import Project="$(_TargetsDirmacOS)\Xamarin.Mac.ObjCBinding.$(_ProjectLanguage).targets"  Condition="'$(_ProjectType)' == 'macOSBindingProject' " />


	<Target Name="_CompileToNative" /> <!-- sledge hammer approach -->
</Project>

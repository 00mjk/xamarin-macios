<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--  Default inclusion -->

  <PropertyGroup>
    <!-- Enable default inclusion behavior unless told otherwise, but default to the value for EnableDefaultItems -->
    <!-- We have a public property for each platform, and unify them into a single private property for our own build logic -->
    <EnableDefaultiOSItems Condition=" '$(_PlatformName)' == 'iOS' And '$(EnableDefaultiOSItems)' == '' ">$(EnableDefaultItems)</EnableDefaultiOSItems>
    <EnableDefaulttvOSItems Condition=" '$(_PlatformName)' == 'tvOS' And '$(EnableDefaulttvOSItems)' == '' ">$(EnableDefaultItems)</EnableDefaulttvOSItems>
    <EnableDefaultwatchOSItems Condition=" '$(_PlatformName)' == 'watchOS' And '$(EnableDefaultwatchOSItems)' == '' ">$(EnableDefaultItems)</EnableDefaultwatchOSItems>
    <EnableDefaultmacOSItems Condition=" '$(_PlatformName)' == 'macOS' And '$(EnableDefaultmacOSItems)' == '' ">$(EnableDefaultItems)</EnableDefaultmacOSItems>
    <_EnableDefaultXamarinItems Condition=" '$(_PlatformName)' == 'iOS' ">$(EnableDefaultiOSItems)</_EnableDefaultXamarinItems>
    <_EnableDefaultXamarinItems Condition=" '$(_PlatformName)' == 'tvOS' ">$(EnableDefaulttvOSItems)</_EnableDefaultXamarinItems>
    <_EnableDefaultXamarinItems Condition=" '$(_PlatformName)' == 'watchOS' ">$(EnableDefaultwatchOSItems)</_EnableDefaultXamarinItems>
    <_EnableDefaultXamarinItems Condition=" '$(_PlatformName)' == 'macOS' ">$(EnableDefaultmacOSItems)</_EnableDefaultXamarinItems>

    <!-- Don't include default Compile items for binding projects, because that would pick up ApiDefinition.cs and StructsAndEnums.cs -->
    <EnableDefaultCompileItems Condition=" '$(EnableDefaultCompileItems)' == '' And '$(IsBindingProject)' == 'true' ">false</EnableDefaultCompileItems>
  </PropertyGroup>

  <!-- Default plist file inclusion -->
  <ItemGroup Condition="'$(_EnableDefaultXamarinItems)' == 'true' ">
    <None Include="*.plist">
      <Link>$([MSBuild]::MakeRelative ('$(MSBuildProjectDirectory)', '%(Identity)'))</Link>
    </None>
  </ItemGroup>

  <!-- If the old-style variables are set, use those -->
  <PropertyGroup>
    <_Architecture Condition=" '$(_PlatformName)' == 'macOS' And '$(XamMacArch)' != '' ">$(XamMacArch)</_Architecture>
    <_Architecture Condition=" '$(_PlatformName)' != 'macOS' And '$(MtouchArch)' != '' ">$(MtouchArch)</_Architecture>
  </PropertyGroup>
  <!-- Compute the architecture if it's not set. This is a variation of https://github.com/dotnet/sdk/blob/873d79d861cbd001488414b9875e53acbeaed890/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.RuntimeIdentifierInference.targets#L68-L96 -->
  <PropertyGroup Condition=" '$(_Architecture)' == '' And '$(_PlatformName)' == 'iOS' ">
    <_Architecture Condition=" $(RuntimeIdentifier.EndsWith('-arm64')) Or $(RuntimeIdentifier.Contains('-arm64-')) ">ARM64</_Architecture>
    <_Architecture Condition=" $(RuntimeIdentifier.EndsWith('-x64')) Or $(RuntimeIdentifier.Contains('-x64-')) ">x86_64</_Architecture>
    <_Architecture Condition=" $(RuntimeIdentifier.EndsWith('-x84')) Or $(RuntimeIdentifier.Contains('-x86-')) ">i386</_Architecture>
    <_Architecture Condition=" ($(RuntimeIdentifier.EndsWith('-arm')) Or $(RuntimeIdentifier.Contains('-arm-'))) ">ARMv7</_Architecture> <!-- FIXME: how to enable ARMv7s? Ref: https://github.com/dotnet/runtime/issues/34121 -->
  </PropertyGroup>
  <PropertyGroup Condition=" '$(_Architecture)' == '' And '$(_PlatformName)' == 'tvOS' ">
    <_Architecture Condition=" $(RuntimeIdentifier.EndsWith('-arm64')) Or $(RuntimeIdentifier.Contains('-arm64-')) ">ARM64</_Architecture>
    <_Architecture Condition=" $(RuntimeIdentifier.EndsWith('-x64')) Or $(RuntimeIdentifier.Contains('-x64-')) ">x86_64</_Architecture>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(_Architecture)' == '' And '$(_PlatformName)' == 'watchOS' ">
    <_Architecture Condition=" $(RuntimeIdentifier.EndsWith('-x84')) Or $(RuntimeIdentifier.Contains('-x86-')) ">i386</_Architecture>
    <_Architecture Condition=" ($(RuntimeIdentifier.EndsWith('-arm')) Or $(RuntimeIdentifier.Contains('-arm-'))) ">ARM64_32</_Architecture> <!-- FIXME: what about ARMv7k? -->
  </PropertyGroup>
  <PropertyGroup Condition=" '$(_Architecture)' == '' And '$(_PlatformName)' == 'macOS' ">
    <_Architecture Condition=" '$(RuntimeIdentifier)' == 'osx-x64' ">x86_64</_Architecture>
  </PropertyGroup>
  <!-- Set the old-style variables as well -->
  <PropertyGroup>
    <XamMacArch Condition=" '$(_PlatformName)' == 'macOS' And '$(XamMacArch)' == '' ">$(_Architecture)</XamMacArch>
    <MtouchArch Condition=" '$(_PlatformName)' != 'macOS' And '$(MtouchArch)' == '' ">$(_Architecture)</MtouchArch>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(ComputedPlatform)' == '' ">
    <ComputedPlatform Condition="'$(_Architecture)' == 'i386' Or '$(_Architecture)' == 'x86_64'">iPhoneSimulator</ComputedPlatform>
    <ComputedPlatform Condition="'$(_Architecture)' == 'ARMv7' Or '$(_Architecture)' == 'ARMv7s' Or '$(_Architecture)' == 'ARM64' Or '$(_Architecture)' == 'ARMv7k' Or '$(_Architecture)' == 'ARM64_32'">iPhone</ComputedPlatform>
  </PropertyGroup>

  <!-- Use a XM/XI-agnostic variable for debug support -->
  <PropertyGroup>
    <_IsDebug Condition="'$(_PlatformName)' != 'macOS'">$(MtouchDebug)</_IsDebug>
    <_IsDebug Condition="'$(_PlatformName)' == 'macOS' And '$(MmpDebug)' != ''">$(MmpDebug)</_IsDebug> <!-- If MmpDebug is set, use that -->
    <_IsDebug Condition="'$(_PlatformName)' == 'macOS' And '$(_IsDebug)' == ''">$(DebugSymbols)</_IsDebug> <!-- Otherwise use DebugSymbols -->
    <_IsDebug Condition="'$(_IsDebug)' == ''">false</_IsDebug> <!-- default to false -->
  </PropertyGroup>

  <!-- Default Asset Catalog file inclusion -->
  <ItemGroup Condition="'$(_EnableDefaultXamarinItems)' == 'true' ">
    <ImageAsset Include="**\*.xcassets\**\*.png;**\*.xcassets\*\*.jpg;**\*.xcassets\**\*.json">
      <Link>$([MSBuild]::MakeRelative ('$(MSBuildProjectDirectory)', '%(Identity)'))</Link>
      <Visible>false</Visible>
      <IsDefaultItem>true</IsDefaultItem>
    </ImageAsset>
  </ItemGroup>

  <!-- Default Storyboard file inclusion -->
  <ItemGroup Condition=" '$(_EnableDefaultXamarinItems)' == 'true' ">
    <InterfaceDefinition Include="**\*.storyboard;**\*.xib">
      <Link>$([MSBuild]::MakeRelative ('$(MSBuildProjectDirectory)', '%(Identity)'))</Link>
      <IsDefaultItem>true</IsDefaultItem>
    </InterfaceDefinition>
  </ItemGroup>

  <!-- Default Atlas Texture file inclusion -->
  <ItemGroup Condition=" '$(_EnableDefaultXamarinItems)' == 'true' ">
    <AtlasTexture Include="**\*.atlas\*.png">
      <Link>$([MSBuild]::MakeRelative ('$(MSBuildProjectDirectory)', '%(Identity)'))</Link>
      <IsDefaultItem>true</IsDefaultItem>
    </AtlasTexture>
  </ItemGroup>

  <!-- Default plist file inclusion -->
  <ItemGroup Condition="'$(_EnableDefaultXamarinItems)' == 'true' ">
    <None Include="*.plist">
      <Link>$([MSBuild]::MakeRelative ('$(MSBuildProjectDirectory)', '%(Identity)'))</Link>
      <IsDefaultItem>true</IsDefaultItem>
    </None>
  </ItemGroup>

  <!-- Default iTunesArtwork inclusion -->
  <ItemGroup Condition="'$(_EnableDefaultXamarinItems)' == 'true' ">
    <ITunesArtwork Include="iTunesArtwork" Condition="Exists ('iTunesArtwork')">
      <Link>$([MSBuild]::MakeRelative ('$(MSBuildProjectDirectory)', '%(Identity)'))</Link>
      <IsDefaultItem>true</IsDefaultItem>
    </ITunesArtwork>
    <ITunesArtwork Include="iTunesArtwork%402x" Condition="Exists ('iTunesArtwork%402x')">
      <Link>$([MSBuild]::MakeRelative ('$(MSBuildProjectDirectory)', '%(Identity)'))</Link>
      <IsDefaultItem>true</IsDefaultItem>
    </ITunesArtwork>
  </ItemGroup>

  <!-- Default CoreMLModel inclusion -->
  <ItemGroup Condition="'$(_EnableDefaultXamarinItems)' == 'true' ">
    <CoreMLModel Include="**\*.mlmodel">
      <Link>$([MSBuild]::MakeRelative ('$(MSBuildProjectDirectory)', '%(Identity)'))</Link>
      <IsDefaultItem>true</IsDefaultItem>
    </CoreMLModel>
  </ItemGroup>

  <!-- Default Metal inclusion -->
  <ItemGroup Condition="'$(_EnableDefaultXamarinItems)' == 'true' ">
    <Metal Include="**\*.metal">
      <Link>$([MSBuild]::MakeRelative ('$(MSBuildProjectDirectory)', '%(Identity)'))</Link>
      <IsDefaultItem>true</IsDefaultItem>
    </Metal>
  </ItemGroup>

  <!-- Default SceneKit assets inclusion -->
  <ItemGroup Condition="'$(_EnableDefaultXamarinItems)' == 'true' ">
    <SceneKitAsset Include="**\*.scnassets\*">
      <IsDefaultItem>true</IsDefaultItem>
    </SceneKitAsset>
  </ItemGroup>

  <!-- Default includes for binding projects: StructsAndEnums.cs and ApiDefinition.cs -->
  <ItemGroup Condition="'$(_EnableDefaultXamarinItems)' == 'true' ">
    <ObjcBindingCoreSource Condition="Exists ('StructsAndEnums.cs')" Include="StructsAndEnums.cs">
      <IsDefaultItem>true</IsDefaultItem>
    </ObjcBindingCoreSource>
    <ObjcBindingApiDefinition Condition="Exists ('ApiDefinition.cs')" Include="ApiDefinition.cs">
      <IsDefaultItem>true</IsDefaultItem>
    </ObjcBindingApiDefinition>
  </ItemGroup>

   <!-- Default References -->
  <ItemGroup Condition="'$(XamarinReplaceBuildTarget)' != 'false' And '$(DisableImplicitFrameworkReferences)' != 'true'">
    <Reference Include="mscorlib" />
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Numerics" />
    <Reference Include="System.Runtime" />
    <Reference Include="System.Xml" />
    <Reference Include="Xamarin.iOS" Condition="'$(_PlatformName)' == 'iOS'" />
    <Reference Include="Xamarin.TVOS" Condition="'$(_PlatformName)' == 'tvOS'" />
    <Reference Include="Xamarin.WatchOS" Condition="'$(_PlatformName)' == 'watchOS'" />
    <Reference Include="Xamarin.Mac" Condition="'$(_PlatformName)' == 'macOS'" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="$(MSBuildProjectDirectory)\Resources\" />
  </ItemGroup>

  <!-- Declare the XI/XM framework bundled with this version of the SDK. See Microsoft.NETCoreSdk.BundledVersions.props -->
  <PropertyGroup>
    <!-- Runtime pack identifiers -->
    <_RuntimePackRuntimeIdentifiers Condition=" '$(_PlatformName)' == 'iOS' ">ios-x64;ios-arm64;ios-arm;ios-x86</_RuntimePackRuntimeIdentifiers>
    <_RuntimePackRuntimeIdentifiers Condition=" '$(_PlatformName)' == 'tvOS' ">tvos-x64;tvos-arm64</_RuntimePackRuntimeIdentifiers>
    <_RuntimePackRuntimeIdentifiers Condition=" '$(_PlatformName)' == 'watchOS' ">watchos-x86;watchos-arm</_RuntimePackRuntimeIdentifiers>
    <_RuntimePackRuntimeIdentifiers Condition=" '$(_PlatformName)' == 'macOS' ">osx-x64</_RuntimePackRuntimeIdentifiers>
  </PropertyGroup>

  <ItemGroup>
    <KnownFrameworkReference Include="Microsoft.$(_PlatformName)"
                            TargetFramework="net5.0"
                            RuntimeFrameworkName="Microsoft.$(_PlatformName)"
                            DefaultRuntimeFrameworkVersion="$(_ShortPackageVersion)"
                            LatestRuntimeFrameworkVersion="$(_ShortPackageVersion)"
                            TargetingPackName="Microsoft.$(_PlatformName).Ref"
                            TargetingPackVersion="$(_ShortPackageVersion)"
                            RuntimePackNamePatterns="Microsoft.$(_PlatformName).Runtime.**RID**"
                            RuntimePackRuntimeIdentifiers="$(_RuntimePackRuntimeIdentifiers)"
                            Profile="$(_PlatformName)"
                            />
  </ItemGroup>

  <ItemGroup Condition="'$(DisableImplicitFrameworkReferences)' != 'true'">
    <FrameworkReference Include="Microsoft.$(_PlatformName)" IsImplicitlyDefined="true" Pack="false" PrivateAssets="All" />
  </ItemGroup>

  <!-- Hack up something that seems to work for macOS.
      The problem is that by default we get the 'Microsoft.NETCore.App.Runtime.osx-x64' runtime pack (the core clr version), when we want the 'Microsoft.NETCore.App.Mono.Runtime.osx-x64' runtime pack.
      This hack works around that by declaring a new known framework for mono's runtime pack, removing the default 'Microsoft.NETCore.App' framework reference, and adding the mono one.
   -->
  <ItemGroup Condition="'$(_PlatformName)' == 'macOS'">
    <KnownFrameworkReference Include="Microsoft.NETCore.App.Mono"
                              TargetFramework="netcoreapp5.0"
                              RuntimeFrameworkName="Microsoft.NETCore.App.Mono"
                              DefaultRuntimeFrameworkVersion="$(BundledNETCorePlatformsPackageVersion)"
                              LatestRuntimeFrameworkVersion="$(BundledNETCorePlatformsPackageVersion)"
                              TargetingPackName="Microsoft.NETCore.App.Ref"
                              TargetingPackVersion="$(BundledNETCorePlatformsPackageVersion)"
                              RuntimePackNamePatterns="Microsoft.NETCore.App.Runtime.Mono.**RID**"
                              RuntimePackRuntimeIdentifiers="osx-x64"
                              IsTrimmable="true"
                              />
    <FrameworkReference Remove="Microsoft.NETCore.App" />
    <FrameworkReference Include="Microsoft.NETCore.App.Mono" IsImplicitlyDefined="true" Pack="false" PrivateAssets="All" />
  </ItemGroup>

</Project>

# Xamarin
# 
# The following template contains all the different steps that can be used to create a device tests pipeline in 
# VSTS. The template accepts the following parameters:
#
# demands: The capabilities that the bots need.
#
# Because we are using a matrix, the following env vars should be set in it:
#
# CONTEXT: The context that is used to set the status of the commit in github.
# TESTS_EXTRA_ARGUMENTS: the extra arguments passed to the runner to decide which tests need to be ran.

steps:

# - checkout: self
# - checkout: maccore
#   persistCredentials: true

# - bash: ./xamarin-macios/tools/devops/system-info.sh
#   displayName: System info

# - bash: cd xamarin-macios && ./configure --enable-xamarin
#   displayName: 'Enable Xamarin'

# - bash: |
#     set -x
#     set -e

#     rm -f ~/Library/Caches/com.xamarin.provisionator/Provisions/*p12
#     rm -f ~/Library/Caches/com.xamarin.provisionator/Provisions/*mobileprovision

#     ./maccore/tools/install-qa-provisioning-profiles.sh -v
#   displayName: 'Add provisioning profiles'
#   env:
#     LOGIN_KEYCHAIN_PASSWORD: $(OSX_KEYCHAIN_PASS)

# - bash: |
#     set -x
#     set -e

#     CONFIGURE_ARGS="--provision-xcode --provision-xamarin-studio --provision-mono --ignore-osx --ignore-autotools --ignore-cmake"
#     if grep ignore-7z xamarin-macios/system-dependencies.sh 2>&1 > /dev/null; then
#         CONFIGURE_ARGS="$CONFIGURE_ARGS --provision-7z"
#     fi
#     if grep ignore-python3 xamarin-macios/system-dependencies.sh 2>&1 > /dev/null; then
#         CONFIGURE_ARGS="$CONFIGURE_ARGS --ignore-python3"
#     fi
#     ./xamarin-macios/system-dependencies.sh $CONFIGURE_ARGS
#     if [ $? -eq 0 ]; then
#       echo "##vso[task.setvariable variable=ProvisioningProfiles]success"
#     else
#       echo "##vso[task.setvariable variable=ProvisioningProfiles]failure"
#     fi
#   displayName: 'Provision dependencies'
#   timeoutInMinutes: 240

# - bash: ./xamarin-macios/tools/devops/install-xi-pkg.sh
#   displayName: 'Install XI PKG'
#   timeoutInMinutes: 15

# - bash: |
#     set -x
#     set +e # Don't care about errors here

#     pkill -9 mlaunch
#     pkill -9 -f mono.*xharness.exe
#     pkill -9 -f ssh.*rsync.*xamarin-storage

#     exit 0
#   displayName: 'Process cleanup'

# - bash: |
#     security set-key-partition-list -S apple-tool:,apple: -s -k $(OSX_KEYCHAIN_PASS) login.keychain
#   displayName: 'Remove security UI-prompt (http://stackoverflow.com/a/40039594/183422)'
#   condition: succeededOrFailed()

# - bash: |
#     set -e
#     set -x
#     echo 1234567890 > ~/.mlaunch-verbosity
#   displayName: 'Make mlaunch verbose'

# - bash: |
#     set -e
#     set -x
#     sudo launchctl stop com.apple.usbmuxd
#   displayName: 'Fix device discovery (reset launchctl)'

# ###
# ### Run the device tests
# ###

# - bash: ./xamarin-macios/tools/devops/run-tests.sh
#   displayName: 'Run tests'
#   timeoutInMinutes: 600


# - bash: ./xamarin-macios/tools/devops/add-summaries.sh
#   displayName: 'Add summaries'
#   continueOnError: true
#   condition: and(succeededOrFailed(), eq(variables['ProvisioningProfiles'], 'success'))

# - task: ArchiveFiles@1
#   displayName: 'Archive HtmlReport'
#   inputs:
#     rootFolder: 'xamarin-macios/jenkins-results'
#     includeRootFolder: false
#     archiveFile: '$(Build.ArtifactStagingDirectory)/HtmlReport-$(Build.BuildId).zip'
#   continueOnError: true
#   condition: and(succeededOrFailed(), eq(variables['ProvisioningProfiles'], 'success'))

###
### Upload the xml results to vsts. We have two types, nunit and xunit. We want both
###

# - task: PublishTestResults@2
#   displayName: 'Publish NUnit Device Test Results'
#   inputs:
#     testResultsFormat: NUnit
#     testResultsFiles: '**/vsts-*.xml'
#     failTaskOnFailedTests: true
#     testRunTitle: 'Test-Results-$(CONTEXT)-$(TESTS)'
#   continueOnError: true
#   condition: and(succeededOrFailed(), eq(variables['ProvisioningProfiles'], 'success'))

###
### Push the HTML report to Azure DevOps (shows up in Summary tab as Build Artifact)
###
- bash: |
    echo "$CONTEXT" >> TestSummary-$CONTEXT.md

# - task: PublishPipelineArtifact@1
#   displayName: 'Publish Artifact: HtmlReport'
#   inputs:
#     targetPath: '$(Build.ArtifactStagingDirectory)/HtmlReport-$(Build.BuildId).zip'
#     artifactName: HtmlReport-$(CONTEXT)
#   continueOnError: true
#   condition: and(succeededOrFailed(), eq(variables['ProvisioningProfiles'], 'success'))

- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifact: TestSummary'
  inputs:
#    targetPath: 'xamarin-macios/tests/TestSummary.md'
    targetPath: TestSummary-$(CONTEXT)
    artifactName: TestSummary-$(CONTEXT)
  continueOnError: true
#  condition: and(succeededOrFailed(), eq(variables['ProvisioningProfiles'], 'success'))

###
### Cleanup after us, not having that can lead to VSMac install issues
###

# - bash: |
#     sudo rm -rf /Applications/Visual\ Studio*
#     rm -rf ~/Library/Caches/VisualStudio
#     rm -rf ~/Library/Logs/VisualStudio
#     rm -rf ~/Library/VisualStudio
#     rm -rf ~/Library/Preferences/Xamarin/
#     rm -rf ~/Library/Caches/com.xamarin.provisionator
#   displayName: 'Cleanup'
#   continueOnError: true
#   condition: always() # no matter what, includes cancellation

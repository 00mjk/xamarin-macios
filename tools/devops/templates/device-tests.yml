# Xamarin
#
# The following template contains all the different steps that can be used to create a device tests pipeline in
# VSTS. The template accepts the following parameters:
#
# demands: The capabilities that the bots need.
#
# Because we are using a matrix, the following env vars should be set in it:
#
# CONTEXT: The context that is used to set the status of the commit in github.
# TESTS_EXTRA_ARGUMENTS: the extra arguments passed to the runner to decide which tests need to be ran.
#
# Condition: succeededOrFailed() - true even if a previous dependency has failed, unless the run was canceled.

steps:

- checkout: self
- checkout: maccore
  persistCredentials: true

- bash: ./xamarin-macios/tools/devops/system-info.sh
  displayName: System info

- bash: cd xamarin-macios && ./configure --enable-xamarin
  displayName: 'Enable Xamarin'

- bash: |
    set -x
    set -e

    rm -f ~/Library/Caches/com.xamarin.provisionator/Provisions/*p12
    rm -f ~/Library/Caches/com.xamarin.provisionator/Provisions/*mobileprovision

    EC=0
    ./maccore/tools/install-qa-provisioning-profiles.sh -v || EC=$?
    if [ $EC -eq 0 ]; then
      echo "##vso[task.setvariable variable=ProvisioningProfiles]success"
    else
      echo "##vso[task.setvariable variable=ProvisioningProfiles]failure"
    fi
    exit $EC
  displayName: 'Add provisioning profiles'
  env:
    LOGIN_KEYCHAIN_PASSWORD: $(OSX_KEYCHAIN_PASS)

- bash: make -C $(System.DefaultWorkingDirectory)/xamarin-macios/tools/devops/ device-tests-provisioning.csx
  displayName: 'Generate Provisionator csx file'

- bash: rm -rf "/Users/xamarinqa/azdo/_work/_tool/provisionator"
  displayName: 'Nuke Provisionator Tool Cache'
  condition: $(clearProviCache)

- task: xamops.azdevex.provisionator-task.provisionator@1
  displayName: 'Provision dependencies'
  inputs:
    provisioning_script: $(System.DefaultWorkingDirectory)/xamarin-macios/tools/devops/device-tests-provisioning.csx
    provisioning_extra_args: '-vvvv'
  timeoutInMinutes: 250

###
### TODO: set ProvisioningProfiles based on provisionator success/failure
###

- bash: |
    set -x
    set +e # Don't care about errors here

    pkill -9 mlaunch
    pkill -9 -f mono.*xharness.exe
    pkill -9 -f ssh.*rsync.*xamarin-storage

    exit 0
  displayName: 'Process cleanup'

- bash: |
    security set-key-partition-list -S apple-tool:,apple: -s -k $(OSX_KEYCHAIN_PASS) login.keychain
  displayName: 'Remove security UI-prompt (http://stackoverflow.com/a/40039594/183422)'
  condition: succeededOrFailed()

- bash: |
    set -e
    set -x
    echo 1234567890 > ~/.mlaunch-verbosity
  displayName: 'Make mlaunch verbose'

- bash: |
    set -e
    set -x
    sudo launchctl stop com.apple.usbmuxd
  displayName: 'Fix device discovery (reset launchctl)'

###
### Always set TestState to failure. If tests are skipped we do not want to have TestState == null.
###
- bash: |
    set -x
    set -e

    echo "##vso[task.setvariable variable=TestState]failure"
  displayName: 'Set TestState to failure before trying to run tests'
  condition: succeededOrFailed()

###
### Run the device tests
###
- bash: |
    set -x
    set -e

    EC=0
    ./xamarin-macios/tools/devops/run-tests.sh || EC=$?

    if [ $EC -eq 0 ]; then
      echo "##vso[task.setvariable variable=TestState]success"
    else
      echo "##vso[task.setvariable variable=TestState]failure"
    fi
    exit $EC
  displayName: 'Run tests'
  timeoutInMinutes: 600

  ###
  ### If test summary does not exist, create test summary files so that we can notify
  ### that no results were published at the per-test AND final results steps
  ###
- bash: |
    set -e
    set -x
    FILE="xamarin-macios/tests/TestSummary.md"
    echo $FILE
    if ! test -f $FILE; then
      echo ":fire: Tests failed catastrophically (no summary found)" > $FILE
      echo "##vso[task.setvariable variable=TestState]failure"
    fi
  displayName: "Check for test summary, if does not exist create test summary"
  condition: and(succeededOrFailed(), eq(variables['ProvisioningProfiles'], 'success'))

###
### If provisioning failed, create test summary files to indicate failure
###
- bash: |
    set -e
    set -x
    FILE="xamarin-macios/tests/TestSummary.md"
    echo $FILE
    echo ":fire: Provisioning step failed" > $FILE
  displayName: 'Provisioning failed: create test summary'
  condition: and (succeededOrFailed(), eq(variables['ProvisioningProfiles'], 'failure'))

###
### Publish test summary
### We should publish summary for the following cases:
### 1) run-tests created summary files
### 2) run-tests did not create summary files and we created them
### 3) provisioning failed
###
- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifact: TestSummary'
  inputs:
    targetPath: 'xamarin-macios/tests/TestSummary.md'
    artifactName: TestSummary-$(CONTEXT)
  continueOnError: true
  condition: succeededOrFailed()

###
### If there's a test failure || test summary not generated || provisioning failed:
### - update GH commit status
### - add commit comment
###
### Note: pwsh for PowerShell Core (Win + Mac), powershell is for Win only PowerShell
###
- pwsh: ./xamarin-macios/tools/devops/templates/publish_failure.ps1
  env:
    BUILD_REVISION: $(BUILD_REVISION)
    GH_STATE: $(GH_STATE)
    GITHUB_TOKEN: $(GitHub.Token)
    CONTEXT: $(CONTEXT)
    TESTS: $(TESTS)
    TESTSARGS: $(TESTS_EXTRA_ARGUMENTS)
  displayName: 'Powershell: Add GH status & commit message'
  condition: and(succeededOrFailed(), or (eq(variables['TestState'], 'failure'), eq(variables['ProvisioningProfiles'], 'failure')))

- bash: ./xamarin-macios/tools/devops/add-summaries.sh
  displayName: 'Add summaries'
  continueOnError: true
  condition: and(succeededOrFailed(), eq(variables['ProvisioningProfiles'], 'success'))

- task: ArchiveFiles@1
  displayName: 'Archive HtmlReport'
  inputs:
    rootFolder: 'xamarin-macios/jenkins-results'
    includeRootFolder: false
    archiveFile: '$(Build.ArtifactStagingDirectory)/HtmlReport-$(Build.BuildId).zip'
  continueOnError: true
  condition: and(succeededOrFailed(), eq(variables['ProvisioningProfiles'], 'success'))

###
### Upload the xml results to vsts. We have two types, nunit and xunit. We want both
###

- task: PublishTestResults@2
  displayName: 'Publish NUnit Device Test Results'
  inputs:
    testResultsFormat: NUnit
    testResultsFiles: '**/vsts-*.xml'
    failTaskOnFailedTests: true
    testRunTitle: 'Test-Results-$(CONTEXT)-$(TESTS)'
  continueOnError: true
  condition: and(succeededOrFailed(), eq(variables['ProvisioningProfiles'], 'success'))

###
### Push the HTML report to Azure DevOps (shows up in Summary tab as Build Artifact)
###
- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifact: HtmlReport'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/HtmlReport-$(Build.BuildId).zip'
    artifactName: HtmlReport-$(CONTEXT)
  continueOnError: true
  condition: and(succeededOrFailed(), eq(variables['ProvisioningProfiles'], 'success'))


###
### Cleanup after us, not having that can lead to VSMac install issues
###

- bash: |
    sudo rm -rf /Applications/Visual\ Studio*
    rm -rf ~/Library/Caches/VisualStudio
    rm -rf ~/Library/Logs/VisualStudio
    rm -rf ~/Library/VisualStudio
    rm -rf ~/Library/Preferences/Xamarin/
    if [ $(disableProviCleanup) = 'false' ]; then rm -rf ~/Library/Caches/com.xamarin.provisionator; fi
  displayName: 'Cleanup'
  continueOnError: true
  condition: always() # no matter what, includes cancellation
